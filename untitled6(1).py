# -*- coding: utf-8 -*-
"""Untitled6.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16Mp4g5XL5n3AcE2t8YC4TWaBFSuLQnbi
"""

import pandas as pd
import pprint

import pandas as pd


df = pd.read_json('data.json')

# Select the desired columns
df_selected = df[['appointmentId', 'phoneNumber', 'patientDetails', 'consultationData']].copy()
df_selected['firstName'] = df_selected['patientDetails'].apply(lambda x: x.get('firstName'))
df_selected['lastName'] = df_selected['patientDetails'].apply(lambda x: x.get('lastName'))
df_selected['gender'] = df_selected['patientDetails'].apply(lambda x: x.get('gender'))
df_selected['DOB'] = df_selected['patientDetails'].apply(lambda x: x.get('birthDate'))
df_selected['medicines'] = df_selected['consultationData'].apply(lambda x: x.get('medicines'))
df_selected.drop(['patientDetails', 'consultationData'], axis=1, inplace=True)


df_selected.head()

df_selected["gender"].fillna("None", inplace=True)

df_selected.head()

df_selected["fullName"] = df_selected['firstName'].astype(str)+ " " + df_selected["lastName"]

newdf = df_selected[['appointmentId','phoneNumber','fullName','gender','DOB','medicines']].copy()
newdf.head()

import re
def is_valid_mobile(number):
    pattern = r'^(\+91|91)?[6-9]\d{9}$'
    return bool(re.match(pattern, str(number)))


newdf['isValidMobile'] = newdf['phoneNumber'].apply(is_valid_mobile)

newdf.head()

import hashlib


def hash_phone_number(number):
    if is_valid_mobile(number):
        hashed_number = hashlib.sha256(str(number).encode()).hexdigest()
        return hashed_number
    return None

newdf['phoneNumberHash'] = newdf['phoneNumber'].apply(hash_phone_number)


newdf.head()

from datetime import datetime

def calculate_age(dob):
    if dob is None:
        return None
    else:

        dob = pd.to_datetime(dob, utc=True).date()
        age = (datetime.now().date() - dob).days // 365
        return age


newdf['Age'] = newdf['DOB'].apply(calculate_age)


newdf.head()

b = list()
for x in newdf['medicines']:
  count = 0
  for i in x:
    count = count + 1
  b.append(count)
  
ser1 = pd.Series(b)
# print(ser1)

a = list()
for x in newdf['medicines']:
  count = 0
  for i in x:
    if i['isActive']:
      count = count + 1
  a.append(count)


ser2 = pd.Series(a)
# print(ser2)

ser3 = ser1 - ser2
print(ser3)

newdf['noOfMedicines'] = ser1
newdf['noOfActiveMedicines'] = ser2
newdf['noOfInActiveMedicines'] = ser3

newdf.head()

